Terminals unused in grammar

   LOWEST_PREC
   MIDDLE_PREC
   HIGHEST_PREC


State 97 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | /* empty */

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt
    8     | BREAK SEMICOLON
    9     | CONTINUE SEMICOLON
   10     | block
   11     | funcdef
   12     | SEMICOLON

   13 expr: assignexpr
   14     | expr PLUS expr
   15     | expr MINUS expr
   16     | expr STAR expr
   17     | expr DIVIDE expr
   18     | expr MODULE expr
   19     | expr HIGHER expr
   20     | expr HIGHER_EQ expr
   21     | expr LOWER expr
   22     | expr LOWER_EQ expr
   23     | expr EQUAL expr
   24     | expr DIFF expr
   25     | expr AND expr
   26     | expr OR expr
   27     | term

   28 term: primary
   29     | LEFT_PAR expr RIGHT_PAR
   30     | MINUS expr
   31     | NOT expr
   32     | PLUSPLUS lvalue
   33     | lvalue PLUSPLUS
   34     | MINUSMINUS lvalue
   35     | lvalue MINUSMINUS

   36 assignexpr: lvalue ASSIGN expr

   37 primary: lvalue
   38        | call
   39        | objectdef
   40        | const
   41        | LEFT_PAR funcdef RIGHT_PAR

   42 lvalue: ID
   43       | LOCAL ID
   44       | DOUBLE_COLON ID
   45       | member

   46 member: lvalue PERIOD ID
   47       | call PERIOD ID
   48       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   49       | call LEFT_BRACKET expr RIGHT_BRACKET

   50 call: call LEFT_PAR calllist RIGHT_PAR
   51     | lvalue callsuffix
   52     | LEFT_PAR funcdef RIGHT_PAR LEFT_PAR calllist RIGHT_PAR

   53 callsuffix: normcall
   54           | methodcall

   55 normcall: LEFT_PAR calllist RIGHT_PAR

   56 methodcall: DOUBLE_PERIOD ID LEFT_PAR calllist RIGHT_PAR

   57 calllist: expr
   58         | expr exprs2
   59         | /* empty */

   60 exprs2: COMMA calllist

   61 elist: expr
   62      | expr exprs
   63      | /* empty */

   64 elistobj: expr
   65         | expr exprs

   66 exprs: COMMA elist

   67 objectdef: LEFT_BRACKET elistobj RIGHT_BRACKET
   68          | LEFT_BRACKET indexed RIGHT_BRACKET

   69 indexed: indexedelem
   70        | indexedelem indexedelems
   71        | /* empty */

   72 indexedelems: COMMA indexed

   73 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   74 $@1: /* empty */

   75 block: LEFT_BRACE $@1 program RIGHT_BRACE

   76 block2: LEFT_BRACE program RIGHT_BRACE

   77 $@2: /* empty */

   78 $@3: /* empty */

   79 funcdef: FUNCTION $@2 LEFT_PAR $@3 idlist RIGHT_PAR block2

   80 $@4: /* empty */

   81 $@5: /* empty */

   82 funcdef: FUNCTION ID $@4 LEFT_PAR $@5 idlist RIGHT_PAR block2

   83 const: INTEGER
   84      | REAL
   85      | STRING
   86      | NIL
   87      | TRUE
   88      | FALSE

   89 idlist: ID
   90       | ID idlists
   91       | /* empty */

   92 idlists: COMMA idlist

   93 ifstmt: ifprefix stmt
   94       | ifprefix stmt elseprefix stmt

   95 ifprefix: IF LEFT_PAR expr RIGHT_PAR

   96 elseprefix: ELSE

   97 $@6: /* empty */

   98 $@7: /* empty */

   99 whilestmt: WHILE LEFT_PAR $@6 expr RIGHT_PAR $@7 stmt

  100 $@8: /* empty */

  101 $@9: /* empty */

  102 $@10: /* empty */

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON $@9 elist RIGHT_PAR $@10 stmt

  104 returnstmt: RETURN SEMICOLON
  105           | RETURN expr SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 42 43 44 46 47 56 82 89 90
STRING (259) 85
INTEGER (260) 83
REAL (261) 84
IF (262) 95
ELSE (263) 96
WHILE (264) 99
FOR (265) 103
FUNCTION (266) 79 82
RETURN (267) 104 105
BREAK (268) 8
CONTINUE (269) 9
LOCAL (270) 43
TRUE (271) 87
FALSE (272) 88
NIL (273) 86
LEFT_BRACE (274) 73 75 76
RIGHT_BRACE (275) 73 75 76
COLON (276) 73
DOUBLE_COLON (277) 44
PERIOD (278) 46 47
LOWEST_PREC (279)
SEMICOLON (280) 3 8 9 12 103 104 105
ASSIGN (281) 36
COMMA (282) 60 66 72 92
OR (283) 26
AND (284) 25
DIFF (285) 24
EQUAL (286) 23
LOWER_EQ (287) 22
LOWER (288) 21
HIGHER_EQ (289) 20
HIGHER (290) 19
MINUS (291) 15 30
PLUS (292) 14
MIDDLE_PREC (293)
MODULE (294) 18
DIVIDE (295) 17
STAR (296) 16
UMINUS (297)
MINUSMINUS (298) 34 35
PLUSPLUS (299) 32 33
NOT (300) 31
DOUBLE_PERIOD (301) 56
RIGHT_BRACKET (302) 48 49 67 68
LEFT_BRACKET (303) 48 49 67 68
RIGHT_PAR (304) 29 41 50 52 55 56 79 82 95 99 103
LEFT_PAR (305) 29 41 50 52 55 56 79 82 95 99 103
HIGHEST_PREC (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1 2, on right: 0 1 75 76
stmt (54)
    on left: 3 4 5 6 7 8 9 10 11 12, on right: 1 93 94 99 103
expr (55)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right:
    3 14 15 16 17 18 19 20 21 22 23 24 25 26 29 30 31 36 48 49 57 58
    61 62 64 65 73 95 99 103 105
term (56)
    on left: 28 29 30 31 32 33 34 35, on right: 27
assignexpr (57)
    on left: 36, on right: 13
primary (58)
    on left: 37 38 39 40 41, on right: 28
lvalue (59)
    on left: 42 43 44 45, on right: 32 33 34 35 36 37 46 48 51
member (60)
    on left: 46 47 48 49, on right: 45
call (61)
    on left: 50 51 52, on right: 38 47 49 50
callsuffix (62)
    on left: 53 54, on right: 51
normcall (63)
    on left: 55, on right: 53
methodcall (64)
    on left: 56, on right: 54
calllist (65)
    on left: 57 58 59, on right: 50 52 55 56 60
exprs2 (66)
    on left: 60, on right: 58
elist (67)
    on left: 61 62 63, on right: 66 103
elistobj (68)
    on left: 64 65, on right: 67
exprs (69)
    on left: 66, on right: 62 65
objectdef (70)
    on left: 67 68, on right: 39
indexed (71)
    on left: 69 70 71, on right: 68 72
indexedelems (72)
    on left: 72, on right: 70
indexedelem (73)
    on left: 73, on right: 69 70
block (74)
    on left: 75, on right: 10
$@1 (75)
    on left: 74, on right: 75
block2 (76)
    on left: 76, on right: 79 82
funcdef (77)
    on left: 79 82, on right: 11 41 52
$@2 (78)
    on left: 77, on right: 79
$@3 (79)
    on left: 78, on right: 79
$@4 (80)
    on left: 80, on right: 82
$@5 (81)
    on left: 81, on right: 82
const (82)
    on left: 83 84 85 86 87 88, on right: 40
idlist (83)
    on left: 89 90 91, on right: 79 82 92
idlists (84)
    on left: 92, on right: 90
ifstmt (85)
    on left: 93 94, on right: 4
ifprefix (86)
    on left: 95, on right: 93 94
elseprefix (87)
    on left: 96, on right: 94
whilestmt (88)
    on left: 99, on right: 5
$@6 (89)
    on left: 97, on right: 99
$@7 (90)
    on left: 98, on right: 99
forstmt (91)
    on left: 103, on right: 6
$@8 (92)
    on left: 100, on right: 103
$@9 (93)
    on left: 101, on right: 103
$@10 (94)
    on left: 102, on right: 103
returnstmt (95)
    on left: 104 105, on right: 7


state 0

    0 $accept: . program $end

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 25
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 1

   42 lvalue: ID .

    $default  reduce using rule 42 (lvalue)


state 2

   85 const: STRING .

    $default  reduce using rule 85 (const)


state 3

   83 const: INTEGER .

    $default  reduce using rule 83 (const)


state 4

   84 const: REAL .

    $default  reduce using rule 84 (const)


state 5

   95 ifprefix: IF . LEFT_PAR expr RIGHT_PAR

    LEFT_PAR  shift, and go to state 43


state 6

   99 whilestmt: WHILE . LEFT_PAR $@6 expr RIGHT_PAR $@7 stmt

    LEFT_PAR  shift, and go to state 44


state 7

  103 forstmt: FOR . LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON $@9 elist RIGHT_PAR $@10 stmt

    LEFT_PAR  shift, and go to state 45


state 8

   79 funcdef: FUNCTION . $@2 LEFT_PAR $@3 idlist RIGHT_PAR block2
   82        | FUNCTION . ID $@4 LEFT_PAR $@5 idlist RIGHT_PAR block2

    ID  shift, and go to state 46

    $default  reduce using rule 77 ($@2)

    $@2  go to state 47


state 9

  104 returnstmt: RETURN . SEMICOLON
  105           | RETURN . expr SEMICOLON

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 48
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 49
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 10

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 50


state 11

    9 stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 51


state 12

   43 lvalue: LOCAL . ID

    ID  shift, and go to state 52


state 13

   87 const: TRUE .

    $default  reduce using rule 87 (const)


state 14

   88 const: FALSE .

    $default  reduce using rule 88 (const)


state 15

   86 const: NIL .

    $default  reduce using rule 86 (const)


state 16

   75 block: LEFT_BRACE . $@1 program RIGHT_BRACE

    $default  reduce using rule 74 ($@1)

    $@1  go to state 53


state 17

   44 lvalue: DOUBLE_COLON . ID

    ID  shift, and go to state 54


state 18

   12 stmt: SEMICOLON .

    $default  reduce using rule 12 (stmt)


state 19

   30 term: MINUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 55
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 20

   34 term: MINUSMINUS . lvalue

    ID            shift, and go to state 1
    LOCAL         shift, and go to state 12
    DOUBLE_COLON  shift, and go to state 17
    LEFT_PAR      shift, and go to state 56

    lvalue  go to state 57
    member  go to state 32
    call    go to state 58


state 21

   32 term: PLUSPLUS . lvalue

    ID            shift, and go to state 1
    LOCAL         shift, and go to state 12
    DOUBLE_COLON  shift, and go to state 17
    LEFT_PAR      shift, and go to state 56

    lvalue  go to state 59
    member  go to state 32
    call    go to state 58


state 22

   31 term: NOT . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 60
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 23

   67 objectdef: LEFT_BRACKET . elistobj RIGHT_BRACKET
   68          | LEFT_BRACKET . indexed RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 61
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 71 (indexed)

    expr         go to state 62
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elistobj     go to state 63
    objectdef    go to state 34
    indexed      go to state 64
    indexedelem  go to state 65
    const        go to state 37


state 24

   29 term: LEFT_PAR . expr RIGHT_PAR
   41 primary: LEFT_PAR . funcdef RIGHT_PAR
   52 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR calllist RIGHT_PAR

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    FUNCTION      shift, and go to state 8
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 66
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 67
    const       go to state 37


state 25

    0 $accept: program . $end

    $end  shift, and go to state 68


state 26

    1 program: stmt . program

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 69
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 27

    3 stmt: expr . SEMICOLON
   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    SEMICOLON  shift, and go to state 70
    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83


state 28

   27 expr: term .

    $default  reduce using rule 27 (expr)


state 29

   13 expr: assignexpr .

    $default  reduce using rule 13 (expr)


state 30

   28 term: primary .

    $default  reduce using rule 28 (term)


state 31

   33 term: lvalue . PLUSPLUS
   35     | lvalue . MINUSMINUS
   36 assignexpr: lvalue . ASSIGN expr
   37 primary: lvalue .
   46 member: lvalue . PERIOD ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: lvalue . callsuffix

    PERIOD         shift, and go to state 84
    ASSIGN         shift, and go to state 85
    MINUSMINUS     shift, and go to state 86
    PLUSPLUS       shift, and go to state 87
    DOUBLE_PERIOD  shift, and go to state 88
    LEFT_BRACKET   shift, and go to state 89
    LEFT_PAR       shift, and go to state 90

    $default  reduce using rule 37 (primary)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


state 32

   45 lvalue: member .

    $default  reduce using rule 45 (lvalue)


state 33

   38 primary: call .
   47 member: call . PERIOD ID
   49       | call . LEFT_BRACKET expr RIGHT_BRACKET
   50 call: call . LEFT_PAR calllist RIGHT_PAR

    PERIOD        shift, and go to state 94
    LEFT_BRACKET  shift, and go to state 95
    LEFT_PAR      shift, and go to state 96

    $default  reduce using rule 38 (primary)


state 34

   39 primary: objectdef .

    $default  reduce using rule 39 (primary)


state 35

   10 stmt: block .

    $default  reduce using rule 10 (stmt)


state 36

   11 stmt: funcdef .

    $default  reduce using rule 11 (stmt)


state 37

   40 primary: const .

    $default  reduce using rule 40 (primary)


state 38

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


state 39

   93 ifstmt: ifprefix . stmt
   94       | ifprefix . stmt elseprefix stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    stmt        go to state 97
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 40

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


state 41

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


state 42

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


state 43

   95 ifprefix: IF LEFT_PAR . expr RIGHT_PAR

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 98
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 44

   99 whilestmt: WHILE LEFT_PAR . $@6 expr RIGHT_PAR $@7 stmt

    $default  reduce using rule 97 ($@6)

    $@6  go to state 99


state 45

  103 forstmt: FOR LEFT_PAR . elist SEMICOLON $@8 expr SEMICOLON $@9 elist RIGHT_PAR $@10 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 100
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 101
    objectdef   go to state 34
    const       go to state 37


state 46

   82 funcdef: FUNCTION ID . $@4 LEFT_PAR $@5 idlist RIGHT_PAR block2

    $default  reduce using rule 80 ($@4)

    $@4  go to state 102


state 47

   79 funcdef: FUNCTION $@2 . LEFT_PAR $@3 idlist RIGHT_PAR block2

    LEFT_PAR  shift, and go to state 103


state 48

  104 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 104 (returnstmt)


state 49

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
  105 returnstmt: RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 104
    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83


state 50

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


state 51

    9 stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 9 (stmt)


state 52

   43 lvalue: LOCAL ID .

    $default  reduce using rule 43 (lvalue)


state 53

   75 block: LEFT_BRACE $@1 . program RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 105
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 54

   44 lvalue: DOUBLE_COLON ID .

    $default  reduce using rule 44 (lvalue)


state 55

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   30 term: MINUS expr .

    $default  reduce using rule 30 (term)


state 56

   52 call: LEFT_PAR . funcdef RIGHT_PAR LEFT_PAR calllist RIGHT_PAR

    FUNCTION  shift, and go to state 8

    funcdef  go to state 106


state 57

   34 term: MINUSMINUS lvalue .
   46 member: lvalue . PERIOD ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: lvalue . callsuffix

    PERIOD         shift, and go to state 84
    DOUBLE_PERIOD  shift, and go to state 88
    LEFT_BRACKET   shift, and go to state 89
    LEFT_PAR       shift, and go to state 90

    $default  reduce using rule 34 (term)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


state 58

   47 member: call . PERIOD ID
   49       | call . LEFT_BRACKET expr RIGHT_BRACKET
   50 call: call . LEFT_PAR calllist RIGHT_PAR

    PERIOD        shift, and go to state 94
    LEFT_BRACKET  shift, and go to state 95
    LEFT_PAR      shift, and go to state 96


state 59

   32 term: PLUSPLUS lvalue .
   46 member: lvalue . PERIOD ID
   48       | lvalue . LEFT_BRACKET expr RIGHT_BRACKET
   51 call: lvalue . callsuffix

    PERIOD         shift, and go to state 84
    DOUBLE_PERIOD  shift, and go to state 88
    LEFT_BRACKET   shift, and go to state 89
    LEFT_PAR       shift, and go to state 90

    $default  reduce using rule 32 (term)

    callsuffix  go to state 91
    normcall    go to state 92
    methodcall  go to state 93


state 60

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   31 term: NOT expr .

    $default  reduce using rule 31 (term)


state 61

   73 indexedelem: LEFT_BRACE . expr COLON expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 107
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 62

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   64 elistobj: expr .
   65         | expr . exprs

    COMMA      shift, and go to state 108
    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    $default  reduce using rule 64 (elistobj)

    exprs  go to state 109


state 63

   67 objectdef: LEFT_BRACKET elistobj . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 110


state 64

   68 objectdef: LEFT_BRACKET indexed . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 111


state 65

   69 indexed: indexedelem .
   70        | indexedelem . indexedelems

    COMMA  shift, and go to state 112

    $default  reduce using rule 69 (indexed)

    indexedelems  go to state 113


state 66

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   29 term: LEFT_PAR expr . RIGHT_PAR

    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83
    RIGHT_PAR  shift, and go to state 114


state 67

   41 primary: LEFT_PAR funcdef . RIGHT_PAR
   52 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR calllist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 115


state 68

    0 $accept: program $end .

    $default  accept


state 69

    1 program: stmt program .

    $default  reduce using rule 1 (program)


state 70

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


state 71

   26 expr: expr OR . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 72

   25 expr: expr AND . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 117
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 73

   24 expr: expr DIFF . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 118
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 74

   23 expr: expr EQUAL . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 119
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 75

   22 expr: expr LOWER_EQ . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 120
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 76

   21 expr: expr LOWER . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 121
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 77

   20 expr: expr HIGHER_EQ . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 122
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 78

   19 expr: expr HIGHER . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 123
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 79

   15 expr: expr MINUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 124
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 80

   14 expr: expr PLUS . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 125
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 81

   18 expr: expr MODULE . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 126
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 82

   17 expr: expr DIVIDE . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 127
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 83

   16 expr: expr STAR . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 128
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 84

   46 member: lvalue PERIOD . ID

    ID  shift, and go to state 129


state 85

   36 assignexpr: lvalue ASSIGN . expr

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 130
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 86

   35 term: lvalue MINUSMINUS .

    $default  reduce using rule 35 (term)


state 87

   33 term: lvalue PLUSPLUS .

    $default  reduce using rule 33 (term)


state 88

   56 methodcall: DOUBLE_PERIOD . ID LEFT_PAR calllist RIGHT_PAR

    ID  shift, and go to state 131


state 89

   48 member: lvalue LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 132
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 90

   55 normcall: LEFT_PAR . calllist RIGHT_PAR

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 59 (calllist)

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    calllist    go to state 134
    objectdef   go to state 34
    const       go to state 37


state 91

   51 call: lvalue callsuffix .

    $default  reduce using rule 51 (call)


state 92

   53 callsuffix: normcall .

    $default  reduce using rule 53 (callsuffix)


state 93

   54 callsuffix: methodcall .

    $default  reduce using rule 54 (callsuffix)


state 94

   47 member: call PERIOD . ID

    ID  shift, and go to state 135


state 95

   49 member: call LEFT_BRACKET . expr RIGHT_BRACKET

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 136
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 96

   50 call: call LEFT_PAR . calllist RIGHT_PAR

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 59 (calllist)

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    calllist    go to state 137
    objectdef   go to state 34
    const       go to state 37


state 97

   93 ifstmt: ifprefix stmt .
   94       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 138

    ELSE      [reduce using rule 93 (ifstmt)]
    $default  reduce using rule 93 (ifstmt)

    elseprefix  go to state 139


state 98

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   95 ifprefix: IF LEFT_PAR expr . RIGHT_PAR

    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83
    RIGHT_PAR  shift, and go to state 140


state 99

   99 whilestmt: WHILE LEFT_PAR $@6 . expr RIGHT_PAR $@7 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 141
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 100

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   61 elist: expr .
   62      | expr . exprs

    COMMA      shift, and go to state 108
    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    $default  reduce using rule 61 (elist)

    exprs  go to state 142


state 101

  103 forstmt: FOR LEFT_PAR elist . SEMICOLON $@8 expr SEMICOLON $@9 elist RIGHT_PAR $@10 stmt

    SEMICOLON  shift, and go to state 143


state 102

   82 funcdef: FUNCTION ID $@4 . LEFT_PAR $@5 idlist RIGHT_PAR block2

    LEFT_PAR  shift, and go to state 144


state 103

   79 funcdef: FUNCTION $@2 LEFT_PAR . $@3 idlist RIGHT_PAR block2

    $default  reduce using rule 78 ($@3)

    $@3  go to state 145


state 104

  105 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 105 (returnstmt)


state 105

   75 block: LEFT_BRACE $@1 program . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 146


state 106

   52 call: LEFT_PAR funcdef . RIGHT_PAR LEFT_PAR calllist RIGHT_PAR

    RIGHT_PAR  shift, and go to state 147


state 107

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   73 indexedelem: LEFT_BRACE expr . COLON expr RIGHT_BRACE

    COLON      shift, and go to state 148
    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83


state 108

   66 exprs: COMMA . elist

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 100
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 149
    objectdef   go to state 34
    const       go to state 37


state 109

   65 elistobj: expr exprs .

    $default  reduce using rule 65 (elistobj)


state 110

   67 objectdef: LEFT_BRACKET elistobj RIGHT_BRACKET .

    $default  reduce using rule 67 (objectdef)


state 111

   68 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET .

    $default  reduce using rule 68 (objectdef)


state 112

   72 indexedelems: COMMA . indexed

    LEFT_BRACE  shift, and go to state 61

    $default  reduce using rule 71 (indexed)

    indexed      go to state 150
    indexedelem  go to state 65


state 113

   70 indexed: indexedelem indexedelems .

    $default  reduce using rule 70 (indexed)


state 114

   29 term: LEFT_PAR expr RIGHT_PAR .

    $default  reduce using rule 29 (term)


state 115

   41 primary: LEFT_PAR funcdef RIGHT_PAR .
   52 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR calllist RIGHT_PAR

    LEFT_PAR  shift, and go to state 151

    $default  reduce using rule 41 (primary)


state 116

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   26     | expr OR expr .

    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    $default  reduce using rule 26 (expr)


state 117

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   25     | expr AND expr .
   26     | expr . OR expr

    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    $default  reduce using rule 25 (expr)


state 118

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   24     | expr DIFF expr .
   25     | expr . AND expr
   26     | expr . OR expr

    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    DIFF   error (nonassociative)
    EQUAL  error (nonassociative)

    $default  reduce using rule 24 (expr)


state 119

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   23     | expr EQUAL expr .
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    DIFF   error (nonassociative)
    EQUAL  error (nonassociative)

    $default  reduce using rule 23 (expr)


state 120

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   22     | expr LOWER_EQ expr .
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    MINUS   shift, and go to state 79
    PLUS    shift, and go to state 80
    MODULE  shift, and go to state 81
    DIVIDE  shift, and go to state 82
    STAR    shift, and go to state 83

    LOWER_EQ   error (nonassociative)
    LOWER      error (nonassociative)
    HIGHER_EQ  error (nonassociative)
    HIGHER     error (nonassociative)

    $default  reduce using rule 22 (expr)


state 121

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   21     | expr LOWER expr .
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    MINUS   shift, and go to state 79
    PLUS    shift, and go to state 80
    MODULE  shift, and go to state 81
    DIVIDE  shift, and go to state 82
    STAR    shift, and go to state 83

    LOWER_EQ   error (nonassociative)
    LOWER      error (nonassociative)
    HIGHER_EQ  error (nonassociative)
    HIGHER     error (nonassociative)

    $default  reduce using rule 21 (expr)


state 122

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   20     | expr HIGHER_EQ expr .
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    MINUS   shift, and go to state 79
    PLUS    shift, and go to state 80
    MODULE  shift, and go to state 81
    DIVIDE  shift, and go to state 82
    STAR    shift, and go to state 83

    LOWER_EQ   error (nonassociative)
    LOWER      error (nonassociative)
    HIGHER_EQ  error (nonassociative)
    HIGHER     error (nonassociative)

    $default  reduce using rule 20 (expr)


state 123

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   19     | expr HIGHER expr .
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    MINUS   shift, and go to state 79
    PLUS    shift, and go to state 80
    MODULE  shift, and go to state 81
    DIVIDE  shift, and go to state 82
    STAR    shift, and go to state 83

    LOWER_EQ   error (nonassociative)
    LOWER      error (nonassociative)
    HIGHER_EQ  error (nonassociative)
    HIGHER     error (nonassociative)

    $default  reduce using rule 19 (expr)


state 124

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   15     | expr MINUS expr .
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    MODULE  shift, and go to state 81
    DIVIDE  shift, and go to state 82
    STAR    shift, and go to state 83

    $default  reduce using rule 15 (expr)


state 125

   14 expr: expr . PLUS expr
   14     | expr PLUS expr .
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    MODULE  shift, and go to state 81
    DIVIDE  shift, and go to state 82
    STAR    shift, and go to state 83

    $default  reduce using rule 14 (expr)


state 126

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   18     | expr MODULE expr .
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 18 (expr)


state 127

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   17     | expr DIVIDE expr .
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 17 (expr)


state 128

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   16     | expr STAR expr .
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr

    $default  reduce using rule 16 (expr)


state 129

   46 member: lvalue PERIOD ID .

    $default  reduce using rule 46 (member)


state 130

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   36 assignexpr: lvalue ASSIGN expr .

    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    $default  reduce using rule 36 (assignexpr)


state 131

   56 methodcall: DOUBLE_PERIOD ID . LEFT_PAR calllist RIGHT_PAR

    LEFT_PAR  shift, and go to state 152


state 132

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   48 member: lvalue LEFT_BRACKET expr . RIGHT_BRACKET

    OR             shift, and go to state 71
    AND            shift, and go to state 72
    DIFF           shift, and go to state 73
    EQUAL          shift, and go to state 74
    LOWER_EQ       shift, and go to state 75
    LOWER          shift, and go to state 76
    HIGHER_EQ      shift, and go to state 77
    HIGHER         shift, and go to state 78
    MINUS          shift, and go to state 79
    PLUS           shift, and go to state 80
    MODULE         shift, and go to state 81
    DIVIDE         shift, and go to state 82
    STAR           shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 153


state 133

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   57 calllist: expr .
   58         | expr . exprs2

    COMMA      shift, and go to state 154
    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83

    $default  reduce using rule 57 (calllist)

    exprs2  go to state 155


state 134

   55 normcall: LEFT_PAR calllist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 156


state 135

   47 member: call PERIOD ID .

    $default  reduce using rule 47 (member)


state 136

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   49 member: call LEFT_BRACKET expr . RIGHT_BRACKET

    OR             shift, and go to state 71
    AND            shift, and go to state 72
    DIFF           shift, and go to state 73
    EQUAL          shift, and go to state 74
    LOWER_EQ       shift, and go to state 75
    LOWER          shift, and go to state 76
    HIGHER_EQ      shift, and go to state 77
    HIGHER         shift, and go to state 78
    MINUS          shift, and go to state 79
    PLUS           shift, and go to state 80
    MODULE         shift, and go to state 81
    DIVIDE         shift, and go to state 82
    STAR           shift, and go to state 83
    RIGHT_BRACKET  shift, and go to state 157


state 137

   50 call: call LEFT_PAR calllist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 158


state 138

   96 elseprefix: ELSE .

    $default  reduce using rule 96 (elseprefix)


state 139

   94 ifstmt: ifprefix stmt elseprefix . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    stmt        go to state 159
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 140

   95 ifprefix: IF LEFT_PAR expr RIGHT_PAR .

    $default  reduce using rule 95 (ifprefix)


state 141

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   99 whilestmt: WHILE LEFT_PAR $@6 expr . RIGHT_PAR $@7 stmt

    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83
    RIGHT_PAR  shift, and go to state 160


state 142

   62 elist: expr exprs .

    $default  reduce using rule 62 (elist)


state 143

  103 forstmt: FOR LEFT_PAR elist SEMICOLON . $@8 expr SEMICOLON $@9 elist RIGHT_PAR $@10 stmt

    $default  reduce using rule 100 ($@8)

    $@8  go to state 161


state 144

   82 funcdef: FUNCTION ID $@4 LEFT_PAR . $@5 idlist RIGHT_PAR block2

    $default  reduce using rule 81 ($@5)

    $@5  go to state 162


state 145

   79 funcdef: FUNCTION $@2 LEFT_PAR $@3 . idlist RIGHT_PAR block2

    ID  shift, and go to state 163

    $default  reduce using rule 91 (idlist)

    idlist  go to state 164


state 146

   75 block: LEFT_BRACE $@1 program RIGHT_BRACE .

    $default  reduce using rule 75 (block)


state 147

   52 call: LEFT_PAR funcdef RIGHT_PAR . LEFT_PAR calllist RIGHT_PAR

    LEFT_PAR  shift, and go to state 151


state 148

   73 indexedelem: LEFT_BRACE expr COLON . expr RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 165
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 149

   66 exprs: COMMA elist .

    $default  reduce using rule 66 (exprs)


state 150

   72 indexedelems: COMMA indexed .

    $default  reduce using rule 72 (indexedelems)


state 151

   52 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR . calllist RIGHT_PAR

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 59 (calllist)

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    calllist    go to state 166
    objectdef   go to state 34
    const       go to state 37


state 152

   56 methodcall: DOUBLE_PERIOD ID LEFT_PAR . calllist RIGHT_PAR

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 59 (calllist)

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    calllist    go to state 167
    objectdef   go to state 34
    const       go to state 37


state 153

   48 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 48 (member)


state 154

   60 exprs2: COMMA . calllist

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 59 (calllist)

    expr        go to state 133
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    calllist    go to state 168
    objectdef   go to state 34
    const       go to state 37


state 155

   58 calllist: expr exprs2 .

    $default  reduce using rule 58 (calllist)


state 156

   55 normcall: LEFT_PAR calllist RIGHT_PAR .

    $default  reduce using rule 55 (normcall)


state 157

   49 member: call LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 49 (member)


state 158

   50 call: call LEFT_PAR calllist RIGHT_PAR .

    $default  reduce using rule 50 (call)


state 159

   94 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 94 (ifstmt)


state 160

   99 whilestmt: WHILE LEFT_PAR $@6 expr RIGHT_PAR . $@7 stmt

    $default  reduce using rule 98 ($@7)

    $@7  go to state 169


state 161

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 . expr SEMICOLON $@9 elist RIGHT_PAR $@10 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    expr        go to state 170
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 37


state 162

   82 funcdef: FUNCTION ID $@4 LEFT_PAR $@5 . idlist RIGHT_PAR block2

    ID  shift, and go to state 163

    $default  reduce using rule 91 (idlist)

    idlist  go to state 171


state 163

   89 idlist: ID .
   90       | ID . idlists

    COMMA  shift, and go to state 172

    $default  reduce using rule 89 (idlist)

    idlists  go to state 173


state 164

   79 funcdef: FUNCTION $@2 LEFT_PAR $@3 idlist . RIGHT_PAR block2

    RIGHT_PAR  shift, and go to state 174


state 165

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
   73 indexedelem: LEFT_BRACE expr COLON expr . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 175
    OR           shift, and go to state 71
    AND          shift, and go to state 72
    DIFF         shift, and go to state 73
    EQUAL        shift, and go to state 74
    LOWER_EQ     shift, and go to state 75
    LOWER        shift, and go to state 76
    HIGHER_EQ    shift, and go to state 77
    HIGHER       shift, and go to state 78
    MINUS        shift, and go to state 79
    PLUS         shift, and go to state 80
    MODULE       shift, and go to state 81
    DIVIDE       shift, and go to state 82
    STAR         shift, and go to state 83


state 166

   52 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR calllist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 176


state 167

   56 methodcall: DOUBLE_PERIOD ID LEFT_PAR calllist . RIGHT_PAR

    RIGHT_PAR  shift, and go to state 177


state 168

   60 exprs2: COMMA calllist .

    $default  reduce using rule 60 (exprs2)


state 169

   99 whilestmt: WHILE LEFT_PAR $@6 expr RIGHT_PAR $@7 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    stmt        go to state 178
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 170

   14 expr: expr . PLUS expr
   15     | expr . MINUS expr
   16     | expr . STAR expr
   17     | expr . DIVIDE expr
   18     | expr . MODULE expr
   19     | expr . HIGHER expr
   20     | expr . HIGHER_EQ expr
   21     | expr . LOWER expr
   22     | expr . LOWER_EQ expr
   23     | expr . EQUAL expr
   24     | expr . DIFF expr
   25     | expr . AND expr
   26     | expr . OR expr
  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr . SEMICOLON $@9 elist RIGHT_PAR $@10 stmt

    SEMICOLON  shift, and go to state 179
    OR         shift, and go to state 71
    AND        shift, and go to state 72
    DIFF       shift, and go to state 73
    EQUAL      shift, and go to state 74
    LOWER_EQ   shift, and go to state 75
    LOWER      shift, and go to state 76
    HIGHER_EQ  shift, and go to state 77
    HIGHER     shift, and go to state 78
    MINUS      shift, and go to state 79
    PLUS       shift, and go to state 80
    MODULE     shift, and go to state 81
    DIVIDE     shift, and go to state 82
    STAR       shift, and go to state 83


state 171

   82 funcdef: FUNCTION ID $@4 LEFT_PAR $@5 idlist . RIGHT_PAR block2

    RIGHT_PAR  shift, and go to state 180


state 172

   92 idlists: COMMA . idlist

    ID  shift, and go to state 163

    $default  reduce using rule 91 (idlist)

    idlist  go to state 181


state 173

   90 idlist: ID idlists .

    $default  reduce using rule 90 (idlist)


state 174

   79 funcdef: FUNCTION $@2 LEFT_PAR $@3 idlist RIGHT_PAR . block2

    LEFT_BRACE  shift, and go to state 182

    block2  go to state 183


state 175

   73 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE .

    $default  reduce using rule 73 (indexedelem)


state 176

   52 call: LEFT_PAR funcdef RIGHT_PAR LEFT_PAR calllist RIGHT_PAR .

    $default  reduce using rule 52 (call)


state 177

   56 methodcall: DOUBLE_PERIOD ID LEFT_PAR calllist RIGHT_PAR .

    $default  reduce using rule 56 (methodcall)


state 178

   99 whilestmt: WHILE LEFT_PAR $@6 expr RIGHT_PAR $@7 stmt .

    $default  reduce using rule 99 (whilestmt)


state 179

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON . $@9 elist RIGHT_PAR $@10 stmt

    $default  reduce using rule 101 ($@9)

    $@9  go to state 184


state 180

   82 funcdef: FUNCTION ID $@4 LEFT_PAR $@5 idlist RIGHT_PAR . block2

    LEFT_BRACE  shift, and go to state 182

    block2  go to state 185


state 181

   92 idlists: COMMA idlist .

    $default  reduce using rule 92 (idlists)


state 182

   76 block2: LEFT_BRACE . program RIGHT_BRACE

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 2 (program)

    program     go to state 186
    stmt        go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 183

   79 funcdef: FUNCTION $@2 LEFT_PAR $@3 idlist RIGHT_PAR block2 .

    $default  reduce using rule 79 (funcdef)


state 184

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON $@9 . elist RIGHT_PAR $@10 stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    DOUBLE_COLON  shift, and go to state 17
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    $default  reduce using rule 63 (elist)

    expr        go to state 100
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 187
    objectdef   go to state 34
    const       go to state 37


state 185

   82 funcdef: FUNCTION ID $@4 LEFT_PAR $@5 idlist RIGHT_PAR block2 .

    $default  reduce using rule 82 (funcdef)


state 186

   76 block2: LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 188


state 187

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON $@9 elist . RIGHT_PAR $@10 stmt

    RIGHT_PAR  shift, and go to state 189


state 188

   76 block2: LEFT_BRACE program RIGHT_BRACE .

    $default  reduce using rule 76 (block2)


state 189

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON $@9 elist RIGHT_PAR . $@10 stmt

    $default  reduce using rule 102 ($@10)

    $@10  go to state 190


state 190

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON $@9 elist RIGHT_PAR $@10 . stmt

    ID            shift, and go to state 1
    STRING        shift, and go to state 2
    INTEGER       shift, and go to state 3
    REAL          shift, and go to state 4
    IF            shift, and go to state 5
    WHILE         shift, and go to state 6
    FOR           shift, and go to state 7
    FUNCTION      shift, and go to state 8
    RETURN        shift, and go to state 9
    BREAK         shift, and go to state 10
    CONTINUE      shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    DOUBLE_COLON  shift, and go to state 17
    SEMICOLON     shift, and go to state 18
    MINUS         shift, and go to state 19
    MINUSMINUS    shift, and go to state 20
    PLUSPLUS      shift, and go to state 21
    NOT           shift, and go to state 22
    LEFT_BRACKET  shift, and go to state 23
    LEFT_PAR      shift, and go to state 24

    stmt        go to state 191
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    block       go to state 35
    funcdef     go to state 36
    const       go to state 37
    ifstmt      go to state 38
    ifprefix    go to state 39
    whilestmt   go to state 40
    forstmt     go to state 41
    returnstmt  go to state 42


state 191

  103 forstmt: FOR LEFT_PAR elist SEMICOLON $@8 expr SEMICOLON $@9 elist RIGHT_PAR $@10 stmt .

    $default  reduce using rule 103 (forstmt)
